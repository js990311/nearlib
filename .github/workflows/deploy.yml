name: CI/CD to ECR and Public EC2

on:
  push:
    branches: ["frontend-main"]

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Github 저장소의 코드 사용
      - name: Checkout
        uses: actions/checkout@v3

      # 2. AWS 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Amazon ECR Public에 로그인합니다.
      - name: Log in to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      # 4. 빌드 and Push
      - name: Build and push Next.js image to ECR Public
        env:
          IMAGE_TAG_FULL: public.ecr.aws/${{ secrets.ECR_REPOSITORY_PUBLIC_ALIAS }}/${{ secrets.ECR_REPOSITORY_NEXT }}:${{ github.sha }}
        run: |
          echo "${{ secrets.DOT_ENV_FRONTEND }}" > ./frontend/.env
          docker build -t $IMAGE_TAG_FULL ./frontend
          docker push $IMAGE_TAG_FULL

      # 5. Public EC2에 배포
      - name: Deploy to Public EC2
        uses: appleboy/ssh-action@master
        with:
          # --- Public EC2 접속 정보 ---
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}

          # --- EC2에서 실행할 스크립트 ---
          script: |
            # ECR Public 로그인 (EC2 인스턴스 내부에서 실행)
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

            echo "--- Stopping and removing old container ---"
            docker stop my-next-container || true
            docker rm my-next-container || true

            echo "--- Pulling and Running new container ---"
            docker pull public.ecr.aws/${{ secrets.ECR_REPOSITORY_PUBLIC_ALIAS }}/${{ secrets.ECR_REPOSITORY_NEXT }}:${{ github.sha }}
            docker run -d --name my-next-container -p 3000:3000 --restart always public.ecr.aws/${{ secrets.ECR_REPOSITORY_PUBLIC_ALIAS }}/${{ secrets.ECR_REPOSITORY_NEXT }}:${{ github.sha }}

            echo "--- Cleaning up old images ---"
            docker image prune -af
